/*
94. Binary Tree Inorder Traversal
Easy
10.7K
516
Companies
Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?*/
===============================================================================================================================================================
SOLUTION IN JAVA:
=================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> ans = new ArrayList<>();
        Stack<TreeNode> s = new Stack<>();
        if(root==null)
        return ans;
        TreeNode temp = root;
        do{
            s.push(temp);
            temp = temp.left;
            if(temp==null){
                temp = s.pop();
                while(temp!=null){
                    ans.add(temp.val);
                    if(temp.right!=null)
                    {
                        temp = temp.right;
                        break;
                    }     
                    if(!s.empty())               
                    temp = s.pop();
                    else
                    temp = null;
                }
            }
        }while(temp!=null);
        return ans;
    }
}
