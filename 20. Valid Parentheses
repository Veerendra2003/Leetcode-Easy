/*
20. Valid Parentheses
Easy
18.1K
1K
Companies
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
*/
===========================================================================================================================================================================
SOLUTION IN JAVA:
-------------------
class Solution {
    public boolean isValid(String s) {
       Stack<Character> S = new Stack<>();
       for(int i=0; i<s.length(); i++){
           if(s.charAt(i)=='('||s.charAt(i)=='['||s.charAt(i)=='{')
                     S.push(s.charAt(i));        
           else{
               char p='(';
               if(!S.empty())
                 p = S.peek();
               else
                    return false;
               
               if(s.charAt(i)==')' && p=='(')
                    S.pop();
               else if(s.charAt(i)==']' && p=='[')
                    S.pop();
               else if(s.charAt(i)=='}' && p=='{')
                    S.pop();
               else
                    return false;
           }        
       }
       if(!S.empty())
            return false;
        return true;

    }
}
