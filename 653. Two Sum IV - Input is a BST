/*
653. Two Sum IV - Input is a BST
Easy
5.7K
240
Companies
Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-104 <= Node.val <= 104
root is guaranteed to be a valid binary search tree.
-105 <= k <= 105
*/
========================================================================================================================
SOLUTION IN JAVA:
========================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        ArrayList<Integer> ans = new ArrayList();
        if(root==null) return false;
        Stack<TreeNode> s = new Stack();
        TreeNode temp = root;
        do{
            s.push(temp);
            temp = temp.left;
            if(temp == null){
                temp = s.pop();
                while(temp!=null){
                    ans.add(temp.val);
                    if(temp.right!=null)
                    {
                        temp = temp.right;
                        break;
                    }
                    if(!s.empty()){
                        temp = s.pop();
                    }
                    else temp = null;
                }
            }
        }while(temp!=null);
        int i=0;
        int j=ans.size()-1;
        while(i<j){
            if(ans.get(i)+ans.get(j) == k)
            return true;
            if(ans.get(i)+ans.get(j) > k)
            j--;
            else
            i++;
        }
        return false;
    }
}
